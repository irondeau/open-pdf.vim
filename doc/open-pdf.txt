*open-pdf.txt*

Author : rhysd <lin90162@yahoo.co.jp>

CONTENTS          *open-pdf.vim-contents*

Introduction      |open-pdf.vim-introduction|
Usage             |open-pdf.vim-usage|
Install           |open-pdf.vim-install|
Dependency        |open-pdf.vim-dependency|
Commands          |open-pdf.vim-commands|
Variables         |open-pdf.vim-variables|
Hooks             |open-pdf.vim-hooks|
Unite Action      |open-pdf.vim-unite-action|
Setup Example     |open-pdf.vim-setup-example|
License           |open-pdf.vim-license|

==============================================================================
INTRODUCTION                                       *open-pdf.vim-introduction*

*open-pdf.vim* is plugin to open pdf files in vim. This plugin enables to access
pdf files and yank in the files quickly. Conversion from pdf to txt takes
seconds, however, the conversion only occurs at first time because this plugin
cache txt files. If you use |unite.vim|, you can access the cache files using
unite interface.

==============================================================================
USAGE                                                     *open-pdf.vim-usage*

  Open pdf file with a Pdf command.
>
  :Pdf path/to/hoge.pdf
<

  If something goes wrong, you can remove cache.
>
  :PdfClean
<

  Select cache with |unite.vim| interface.
>
  :Unite pdf
<

==============================================================================
INSTALL                                                 *open-pdf.vim-install*

Install the distributed files into Vim script directory which is usually
~/.vim/, or $HOME/vimfiles on Windows.

If you use |vundle|,
>
  :Bundle 'rhysd/open-pdf.vim'
<

If you use |neobundle.vim|,
>
  :NeoBundle 'rhysd/open-pdf.vim'
<

==============================================================================
DEPENDENCY                                           *open-pdf.vim-dependency*

Conversion from pdf to txt depends on |pdftotext| command. This is one of the
commands in poppler package.

|unite.vim| is required to show list of cache files.

==============================================================================
COMMANDS                                               *open-pdf.vim-commands*

:Pdf {path}                            *:Pdf*
    Convert pdf file to txt file and open it. If {file} has been opened at
    first time, this plugin convert it with |pdftotext| and cache. Conversion
    is executed asynchronously when |vimproc| is available. {path} must be
    string of path to the pdf file and the extension must be '.pdf'.

:PdfClean [{file}]                     *:PdfClean*
    Remove cache file from |g:pdf_cache_dir|.{file} is the pdf name, pdf path
    or cache-name of the pdf file to remove. If {file} omitted, all cache
    files have been removed.

==============================================================================
VARIABLES                                             *open-pdf.vim-variables*

g:pdf_cache_dir                        *g:pdf_cache_dir*
    String of a path to cache directory which |open-pdf.vim| uses. If this
    directory doesn't exist, the directory is made with |mkdir|.

    The default value is $HOME.'/.open-pdf.vim.cache'

g:pdf_open_cmd                         *g:pdf_open_cmd*
    String of a command to open converted files.

    The default value is 'vsplit | view'

g:pdf_pdftotext_path                   *g:pdf_pdftotext_path*
    String of a path to pdftotext. If pdftotext doesn't exist in $PATH, you
    should set an absolute path.

    The default value is 'pdftotext' (relative).

    For example, when pdftotext exists in ~/bin
>
    let g:pdf_pdftotext_path = expand('~/bin')
<

g:pdf_hooks                            *g:pdf_hooks*
    Dictionary of |Funcref|. The key is name of hook and the value is
    function.
    See |open-pdf.vim-hooks| to get more information.

==============================================================================
HOOKS                                                     *open-pdf.vim-hooks*

You can put hook functions in |g:pdf_hooks| dictionary. Now, on_opened hook is
only available.

on_opened                              *g:pdf_hooks.on_opened*
    This hook is called after a pdf file has been opened. You can do a pdf file
    buffer local setting using this hook.

    As a default, |'nowrap'|, |'nonumber'| and |'nolist'| flags are set.
    Default definition of |g:pdf_hooks.on_opened| is below.
>
    let g:pdf_hooks = {}
    function! g:pdf_hooks.on_opened()
        setl nowrap nonumber nolist
    endfunction
<

==============================================================================
UNITE ACTION                                       *open-pdf.vim-unite-action*

pdf
    This action is defined in file kind. So, you can choose this action in the
    unite sources which select and open files. Check |unite-kinds| to know
    more about unite kinds.

    For example, type a following command,
>
    :Unite file
<
    and type <Tab>. Then, you find 'pdf' action in candidates. If you do 'pdf'
    action and candidate is pdf file, the pdf file will open like |:Pdf|
    command.

==============================================================================
SETUP EXAMPLE                                     *open-pdf.vim-setup-example*

Write your favorite setting in your vimrc.

Example:
>
  let g:pdf_cache_dir = $HOME.'/.cache/pdf'
  let g:pdf_open_cmd = 'tabnew | view'
<

==============================================================================
LICENSE                                                 *open-pdf.vim-license*

|open-pdf.vim| is distributed under MIT license.

  Copyright (c) 2012 rhysd

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
